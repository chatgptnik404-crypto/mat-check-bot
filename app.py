# app.py
import os
import json
import traceback
from typing import Optional

from fastapi import FastAPI, Request
import httpx

# ================== CONFIG ==================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –∏–ª–∏ "gpt-4o"

API_URL  = f"https://api.telegram.org/bot{BOT_TOKEN}"
FILE_URL = f"https://api.telegram.org/file/bot{BOT_TOKEN}"

# ================== APP =====================
app = FastAPI()


# ------------- Telegram helpers -------------
async def tg_api(method: str, payload: dict):
    async with httpx.AsyncClient(timeout=25) as client:
        r = await client.post(f"{API_URL}/{method}", json=payload)
        if r.status_code != 200:
            print("TG API ERROR", r.status_code, r.text)
        r.raise_for_status()
        return r.json()

async def tg_send_message(chat_id: int | str, text: str, reply_to: Optional[int] = None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    try:
        return await tg_api("sendMessage", payload)
    except Exception as e:
        print("sendMessage failed:", e)
        print(traceback.format_exc())

async def tg_get_file_path(file_id: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_path –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram (–±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)."""
    data = await tg_api("getFile", {"file_id": file_id})
    return data["result"]["file_path"]


# --------------- OpenAI Vision --------------
async def analyze_math_image_by_url(image_url: str, grade_label: str = "") -> dict:
    """
    –ü–µ—Ä–µ–¥–∞—ë—Ç –≤ OpenAI –ø—Ä—è–º—É—é **—Å—Å—ã–ª–∫—É** –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–±–µ–∑ base64) –∏ –ø–æ–ª—É—á–∞–µ—Ç JSON.
    """
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY is missing")

    system_prompt = (
        "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 7‚Äì9 –∫–ª–∞—Å—Å–æ–≤. –¢–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ñ–æ—Ç–æ —Ç–µ—Ç—Ä–∞–¥–∏. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å, –ü–ï–†–ï—Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —Ç–µ–º, "
        "—á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —É—á–µ–Ω–∏–∫–æ–º. –ï—Å–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–ª–æ—Ö–∞—è ‚Äî –Ω–µ —É–≥–∞–¥—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã, –∞ –ø–∏—à–∏, —á—Ç–æ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. "
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON."
    )
    if grade_label:
        system_prompt += f" –ö–ª–∞—Å—Å/—Ç–µ–º–∞: {grade_label}."

    user_prompt = (
        "–í–µ—Ä–Ω–∏ JSON —Ä–æ–≤–Ω–æ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞:\n"
        "{\n"
        '  "confidence": 0.0..1.0,  // –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —É—á–µ–Ω–∏–∫–∞\n'
        '  "steps": ["—à–∞–≥ 1", "—à–∞–≥ 2", "..."],\n'
        '  "mistakes": [{"where":"...", "type":"...", "why":"..."}],\n'
        '  "gaps": ["..."],\n'
        '  "drills": ["–∑–∞–¥–∞—á–∞ 1", "–∑–∞–¥–∞—á–∞ 2", "–∑–∞–¥–∞—á–∞ 3"],\n'
        '  "summary": "1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å"\n'
        "}\n"
        "–ü—Ä–∞–≤–∏–ª–∞: 1) –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É —Å–∞–º. 2) –°—Ä–∞–≤–Ω–∏ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ —É—á–µ–Ω–∏–∫–∞. "
        "3) –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Ü–∏—Ñ—Ä—ã –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è, –æ—Ç–º–µ—Ç—å –≤ mistakes —Ç–∏–ø '–Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ' –∏ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–∞–π –æ—à–∏–±–∫—É. "
        "4) –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî —É–∫–∞–∂–∏, —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç."
    )

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }

    # –í–ê–ñ–ù–û: image_url ‚Äî –û–ë–™–ï–ö–¢ {"url": "..."}; –æ—Ç–¥–∞—ë–º –ü–†–Ø–ú–û–ô URL Telegram (–±–µ–∑ base64)
    payload = {
        "model": OPENAI_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {
                "role": "user",
                "content": [
                    {"type": "image_url", "image_url": {"url": image_url}},
                    {"type": "text", "text": user_prompt},
                ],
            },
        ],
        "temperature": 0.0,
        "max_tokens": 350,  # –¥–µ—Ä–∂–∏–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—ë—à–µ–≤–æ
    }

    async with httpx.AsyncClient(timeout=90) as client:
        r = await client.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload,
        )
        if r.status_code != 200:
            print("OpenAI ERROR", r.status_code, r.text)
        r.raise_for_status()
        data = r.json()

    try:
        raw = data["choices"][0]["message"]["content"]
        return json.loads(raw)
    except Exception:
        try:
            fixed = (raw or "").strip().strip("`").strip()
            return json.loads(fixed)
        except Exception:
            print("JSON parse failed. Raw:", (raw or "")[:500])
            return {
                "confidence": 0.0,
                "steps": [],
                "mistakes": [],
                "gaps": [],
                "drills": [],
                "summary": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Ñ–æ—Ç–æ."
            }


# --------------- Formatting -----------------
def format_report(j: dict) -> str:
    conf = j.get("confidence")
    steps = j.get("steps") or []
    mistakes = j.get("mistakes") or []
    gaps = j.get("gaps") or []
    drills = j.get("drills") or []
    summary = j.get("summary") or ""

    lines = []
    if isinstance(conf, (int, float)):
        lines.append(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {round(float(conf)*100)}%")
        lines.append("")

    if steps:
        lines.append("–®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è:")
        for i, s in enumerate(steps, 1):
            lines.append(f"{i}) {s}")
        lines.append("")

    if mistakes:
        lines.append("–û—à–∏–±–∫–∏:")
        for m in mistakes:
            where = m.get("where", "‚Äî")
            mtype = m.get("type", "‚Äî")
            why = m.get("why", "")
            lines.append(f"‚Ä¢ {where}: {mtype}. {why}")
        lines.append("")
    else:
        lines.append("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∑–∞–ø–∏—Å—å –ø–ª–æ—Ö–æ —á–∏—Ç–∞–µ—Ç—Å—è.")
        lines.append("")

    if gaps:
        lines.append("–í–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã:")
        for g in gaps:
            lines.append(f"‚Ä¢ {g}")
        lines.append("")

    if drills:
        lines.append("–ú–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 –∑–∞–¥–∞–Ω–∏—è):")
        for d in drills:
            lines.append(f"‚Ä¢ {d}")
        lines.append("")

    if summary:
        lines.append(f"–ò—Ç–æ–≥: {summary}")

    msg = "\n".join(lines).strip()
    return msg[:4000] if len(msg) > 4000 else msg


# ----------------- Routes -------------------
@app.get("/")
def health():
    return {"status": "ok"}

@app.post("/webhook/telegram")
async def tg_webhook(request: Request):
    try:
        update = await request.json()

        message = update.get("message") or update.get("edited_message")
        if message:
            chat_id = message["chat"]["id"]
            message_id = message.get("message_id")
            text = message.get("text") or ""
            photos = message.get("photo") or []

            # /start
            if text.startswith("/start"):
                hello = (
                    "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ (–ª—É—á—à–µ –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Ñ–æ—Ç–æ). "
                    "–Ø —Ä–∞–∑–±–µ—Ä—É —Ä–µ—à–µ–Ω–∏–µ, –æ—Ç–º–µ—á—É –æ—à–∏–±–∫–∏ –∏ –¥–∞–º –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n\n"
                    "–õ–∞–π—Ñ—Ö–∞–∫: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∫—Ä—É–ø–Ω–æ –∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–≤–µ—Ç–µ ‚Äî —Ç–∞–∫ —Ç–æ—á–Ω–µ–µ."
                )
                await tg_send_message(chat_id, hello, reply_to=message_id)
                return {"ok": True}

            # –§–æ—Ç–æ
            if photos:
                largest = photos[-1]
                file_id = largest["file_id"]
                try:
                    await tg_send_message(chat_id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶", reply_to=message_id)

                    # –±–µ—Ä—ë–º –ü–†–Ø–ú–û–ô url —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
                    file_path = await tg_get_file_path(file_id)
                    tg_file_url = f"{FILE_URL}/{file_path}"  # –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –±–æ—Ç–∞

                    report = await analyze_math_image_by_url(tg_file_url)
                    text_report = format_report(report) or \
                        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Ñ–æ—Ç–æ –∫—Ä—É–ø–Ω–µ–µ/—Ä–µ–∑—á–µ."

                    await tg_send_message(chat_id, text_report)
                except httpx.HTTPError as e:
                    print("HTTP error during analysis:", e)
                    await tg_send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
                    )
                except Exception as e:
                    print("Analysis error:", e)
                    print(traceback.format_exc())
                    await tg_send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ üòï\n"
                        "–°–¥–µ–ª–∞–π —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ —á—ë—Ç—á–µ, –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞ —Ñ–æ—Ç–æ."
                    )
                return {"ok": True}

            # –≠—Ö–æ ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∂–∏–≤
            if text:
                await tg_send_message(chat_id, f"–Ø –ø–æ–ª—É—á–∏–ª: {text}", reply_to=message_id)
                return {"ok": True}

            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
            return {"ok": True}

        # –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –±—É–¥—É—â–µ–µ
        if update.get("callback_query"):
            chat_id = update["callback_query"]["message"]["chat"]["id"]
            await tg_send_message(chat_id, "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞.")
            return {"ok": True}

        return {"ok": True}

    except Exception as e:
        print("Webhook handler error:", e)
        print(traceback.format_exc())
        return {"ok": True}
