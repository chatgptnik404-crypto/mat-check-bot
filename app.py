# app.py
import os
import io
import json
import base64
import traceback
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, Request
import httpx
from PIL import Image

# ================== CONFIG ==================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –∏–ª–∏ "gpt-4o"
MAX_SIDE = int(os.getenv("MAX_SIDE", "1600"))  # px –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã

API_URL  = f"https://api.telegram.org/bot{BOT_TOKEN}"
FILE_URL = f"https://api.telegram.org/file/bot{BOT_TOKEN}"

# ================== APP =====================
app = FastAPI()
DOWNLOAD_DIR = Path("/tmp/tg_photos")
DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)


# ------------- Telegram helpers -------------
async def tg_api(method: str, payload: dict):
    async with httpx.AsyncClient(timeout=25) as client:
        r = await client.post(f"{API_URL}/{method}", json=payload)
        if r.status_code != 200:
            print("TG API ERROR", r.status_code, r.text)
        r.raise_for_status()
        return r.json()

async def tg_send_message(chat_id: int | str, text: str, reply_to: Optional[int] = None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_to:
        payload["reply_to_message_id"] = reply_to
    try:
        return await tg_api("sendMessage", payload)
    except Exception as e:
        print("sendMessage failed:", e)
        print(traceback.format_exc())

async def tg_get_file(file_id: str) -> str:
    data = await tg_api("getFile", {"file_id": file_id})
    return data["result"]["file_path"]

async def tg_download_file(file_path: str) -> Path:
    url = f"{FILE_URL}/{file_path}"
    local = DOWNLOAD_DIR / Path(file_path).name
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.get(url)
        if r.status_code != 200:
            print("FILE GET ERROR", r.status_code, r.text)
        r.raise_for_status()
        local.write_bytes(r.content)
    return local


# --------------- Image helpers --------------
def load_and_downscale(path: Path, max_side: int = MAX_SIDE) -> bytes:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, —Å–∂–∏–º–∞–µ—Ç (max –¥–ª–∏–Ω–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞), JPEG -> bytes."""
    img = Image.open(path).convert("RGB")
    w, h = img.size
    scale = max(w, h) / max_side if max(w, h) > max_side else 1.0
    if scale > 1.0:
        img = img.resize((int(w/scale), int(h/scale)), Image.LANCZOS)
    buf = io.BytesIO()
    img.save(buf, format="JPEG", quality=88, optimize=True)
    return buf.getvalue()

def b64_jpeg(image_bytes: bytes) -> str:
    return base64.b64encode(image_bytes).decode("ascii")


# --------------- OpenAI Vision --------------
async def analyze_math_image(image_path: Path, grade_label: str = "") -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ OpenAI (vision) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON."""
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY is missing")

    img_bytes = load_and_downscale(image_path, MAX_SIDE)
    img_b64 = b64_jpeg(img_bytes)

    system_prompt = (
        "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 7‚Äì9 –∫–ª–∞—Å—Å–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ —Ç–µ—Ç—Ä–∞–¥–∏: "
        "–∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å–ø–∏—à–∏ —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è, –Ω–∞–π–¥–∏ —Ç–∏–ø–æ–≤—ã–µ –æ—à–∏–±–∫–∏, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã "
        "–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –≤ JSON."
    )
    if grade_label:
        system_prompt += f" –ö–ª–∞—Å—Å/—Ç–µ–º–∞: {grade_label}."

    user_prompt = (
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π JSON –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"
        "{\n"
        '  "steps": ["—à–∞–≥ 1", "—à–∞–≥ 2", "..."],\n'
        '  "mistakes": [{"where":"...", "type":"...", "why":"..."}],\n'
        '  "gaps": ["..."],\n'
        '  "drills": ["–∑–∞–¥–∞—á–∞ 1", "–∑–∞–¥–∞—á–∞ 2", "–∑–∞–¥–∞—á–∞ 3"],\n'
        '  "summary": "1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å"\n'
        "}\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ ‚Äî —É–∫–∞–∂–∏ —ç—Ç–æ –≤ summary –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω–∏ JSON."
    )

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }

    # –í–ê–ñ–ù–û: image_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º {"url": "..."} ‚Äî –∏–Ω–∞—á–µ 400 invalid_type
    payload = {
        "model": OPENAI_MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"},
                    },
                    {"type": "text", "text": user_prompt},
                ],
            },
        ],
        "temperature": 0.2,
        "max_tokens": 600,
    }

    async with httpx.AsyncClient(timeout=90) as client:
        r = await client.post(
            "https://api.openai.com/v1/chat/completions",
            headers=headers,
            json=payload,
        )
        if r.status_code != 200:
            print("OpenAI ERROR", r.status_code, r.text)
        r.raise_for_status()
        data = r.json()

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä—Å–∏–º JSON
    try:
        raw = data["choices"][0]["message"]["content"]
        parsed = json.loads(raw)
        return parsed
    except Exception:
        try:
            fixed = (raw or "").strip().strip("`").strip()
            return json.loads(fixed)
        except Exception:
            print("JSON parse failed. Raw:", (raw or "")[:500])
            return {
                "steps": [],
                "mistakes": [],
                "gaps": [],
                "drills": [],
                "summary": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Ñ–æ—Ç–æ."
            }


# --------------- Formatting -----------------
def format_report(j: dict) -> str:
    steps = j.get("steps") or []
    mistakes = j.get("mistakes") or []
    gaps = j.get("gaps") or []
    drills = j.get("drills") or []
    summary = j.get("summary") or ""

    lines = []
    if steps:
        lines.append("–®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è:")
        for i, s in enumerate(steps, 1):
            lines.append(f"{i}) {s}")
        lines.append("")

    if mistakes:
        lines.append("–û—à–∏–±–∫–∏:")
        for m in mistakes:
            where = m.get("where", "‚Äî")
            mtype = m.get("type", "‚Äî")
            why = m.get("why", "")
            lines.append(f"‚Ä¢ {where}: {mtype}. {why}")
        lines.append("")
    else:
        lines.append("–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è.")
        lines.append("")

    if gaps:
        lines.append("–í–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã:")
        for g in gaps:
            lines.append(f"‚Ä¢ {g}")
        lines.append("")

    if drills:
        lines.append("–ú–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 –∑–∞–¥–∞–Ω–∏—è):")
        for d in drills:
            lines.append(f"‚Ä¢ {d}")
        lines.append("")

    if summary:
        lines.append(f"–ò—Ç–æ–≥: {summary}")

    msg = "\n".join(lines).strip()
    return msg[:4000] if len(msg) > 4000 else msg


# ----------------- Routes -------------------
@app.get("/")
def health():
    return {"status": "ok"}

@app.post("/webhook/telegram")
async def tg_webhook(request: Request):
    try:
        update = await request.json()

        message = update.get("message") or update.get("edited_message")
        if message:
            chat_id = message["chat"]["id"]
            message_id = message.get("message_id")
            text = message.get("text") or ""
            photos = message.get("photo") or []
            grade_label = ""

            # /start
            if text.startswith("/start"):
                hello = (
                    "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ (–ª—É—á—à–µ –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Ñ–æ—Ç–æ). "
                    "–Ø —Ä–∞–∑–±–µ—Ä—É —Ä–µ—à–µ–Ω–∏–µ, –æ—Ç–º–µ—á—É –æ—à–∏–±–∫–∏ –∏ –¥–∞–º –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."
                )
                await tg_send_message(chat_id, hello, reply_to=message_id)
                return {"ok": True}

            # –§–æ—Ç–æ
            if photos:
                largest = photos[-1]
                file_id = largest["file_id"]
                try:
                    await tg_send_message(chat_id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é‚Ä¶", reply_to=message_id)

                    file_path = await tg_get_file(file_id)
                    local_path = await tg_download_file(file_path)

                    report = await analyze_math_image(local_path, grade_label=grade_label)
                    text_report = format_report(report) or \
                        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Ñ–æ—Ç–æ –∫—Ä—É–ø–Ω–µ–µ/—Ä–µ–∑—á–µ."

                    await tg_send_message(chat_id, text_report)
                except httpx.HTTPError as e:
                    print("HTTP error during analysis:", e)
                    await tg_send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
                    )
                except Exception as e:
                    print("Analysis error:", e)
                    print(traceback.format_exc())
                    await tg_send_message(
                        chat_id,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ üòï\n"
                        "–°–¥–µ–ª–∞–π —Å–Ω–∏–º–æ–∫ –±–ª–∏–∂–µ –∏ —á—ë—Ç—á–µ, –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞ —Ñ–æ—Ç–æ."
                    )
                return {"ok": True}

            # –≠—Ö–æ –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            if text:
                await tg_send_message(chat_id, f"–Ø –ø–æ–ª—É—á–∏–ª: {text}", reply_to=message_id)
                return {"ok": True}

            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
            return {"ok": True}

        # –î–ª—è callback-–∫–Ω–æ–ø–æ–∫ (–Ω–∞ –±—É–¥—É—â–µ–µ)
        if update.get("callback_query"):
            chat_id = update["callback_query"]["message"]["chat"]["id"]
            await tg_send_message(chat_id, "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞.")
            return {"ok": True}

        return {"ok": True}

    except Exception as e:
        print("Webhook handler error:", e)
        print(traceback.format_exc())
        return {"ok": True}
